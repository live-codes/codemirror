import{EditorView as I}from"@codemirror/view";import{combineConfig as c,Facet as f}from"@codemirror/state";var a=f.define({combine(t){return c(t,{})}});import{EditorView as m}from"@codemirror/view";function u(){let t=!0;return m.updateListener.of(e=>{let o=e.view.state.facet(r);o&&(!e.docChanged&&!t||(t=!1,o.worker.updateFile({path:o.path,code:e.state.doc.toString()})))})}function p(){return async t=>{let e=t.state.facet(r);return e?e.worker.getAutocompletion({path:e.path,context:{pos:t.pos,explicit:t.explicit}}):null}}import{linter as at}from"@codemirror/lint";import{linter as l}from"@codemirror/lint";function g(){return l(async t=>{let e=t.state.facet(r);return e?e.worker.getLints({path:e.path}):[]})}import{hoverTooltip as yt}from"@codemirror/view";var s=t=>{let e=document.createElement("div");if(t.quickInfo?.displayParts)for(let o of t.quickInfo.displayParts){let n=e.appendChild(document.createElement("span"));n.className=`quick-info-${o.kind}`,n.innerText=o.text}return{dom:e}};import{hoverTooltip as x}from"@codemirror/view";function d({renderTooltip:t=s}={}){return x(async(e,o)=>{let n=e.state.facet(r);if(!n)return null;let i=await n.worker.getHover({path:n.path,pos:o});return i?{pos:i.start,end:i.end,create:()=>t(i,e)}:null})}import{combineConfig as y,Facet as S}from"@codemirror/state";var r=S.define({combine(t){return y(t,{})}});export{p as tsAutocompleteWorker,r as tsFacetWorker,d as tsHoverWorker,g as tsLinterWorker,u as tsSyncWorker};
