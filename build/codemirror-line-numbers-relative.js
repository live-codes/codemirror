var l=Object.defineProperty;var m=(e,t,r)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var i=(e,t,r)=>m(e,typeof t!="symbol"?t+"":t,r);import{EditorView as b,lineNumbers as o,gutter as p,GutterMarker as f}from"@codemirror/view";import{Compartment as d}from"@codemirror/state";var s=new d,n=class extends f{constructor(r){super();i(this,"text");this.text=r}toDOM(){return document.createTextNode(this.text)}},g=p({lineMarker:(e,t)=>{let r=e.state.doc.lineAt(t.from).number,c=new n(r.toString()),a=e.state.doc.lineAt(e.state.selection.asSingle().ranges[0].to).number;return r===a?c:null},initialSpacer:()=>new n("0")});function u(e,t){if(e>t.doc.lines)return" ";let r=t.doc.lineAt(t.selection.asSingle().ranges[0].to).number;return e===r?" ":Math.abs(r-e).toString()}var N=s.of(o({formatNumber:u})),L=b.updateListener.of(e=>{e.selectionSet&&e.view.dispatch({effects:s.reconfigure(o({formatNumber:u}))})});function w(){return[g,N,L]}export{w as lineNumbersRelative};
